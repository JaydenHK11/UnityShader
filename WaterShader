Shader "Custom/WaterSurfaceShader"
{
    Properties
    {
        _MainTex ("Main Texture", 2D) = "white" {}
        _NormalMap ("Normal Map", 2D) = "bump" {}
        _ReflectColor ("Reflection Color", Color) = (0.5, 0.5, 0.5, 1.0)
        _RefractColor ("Refraction Color", Color) = (0.5, 0.5, 0.5, 1.0)
        _Specular ("Specular", Range(0, 1)) = 0.5
    }

    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct appdata_t
            {
                float4 vertex : POSITION;
                float2 texcoord : TEXCOORD0;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float2 texcoord : TEXCOORD0;
                float3 worldPos : TEXCOORD1;
            };

            sampler2D _MainTex;
            sampler2D _NormalMap;
            float4 _ReflectColor;
            float4 _RefractColor;
            float _Specular;

            v2f vert (appdata_t v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.texcoord = v.texcoord;
                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
                return o;
            }

            half4 frag (v2f i) : SV_Target
            {
                // 根据法线贴图获取法线向量
                half3 normal = UnpackNormal(tex2D(_NormalMap, i.texcoord));

                // 计算视线方向
                half3 viewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));

                // 计算反射向量
                half3 reflectDir = reflect(-viewDir, normal);

                // 获取反射纹理颜色
                half4 reflectColor = tex2D(_MainTex, reflectDir.xy * 0.5 + 0.5);

                // 获取折射纹理颜色
                half4 refractColor = tex2D(_MainTex, i.texcoord);

                // 计算最终颜色
                half4 finalColor = lerp(reflectColor, refractColor, _Specular);

                return finalColor;
            }
            ENDCG
        }
    }
}
