Shader "Custom/FrostedGlassShader"
{
    Properties
    {
        _MainTex ("Albedo (RGB)", 2D) = "white"
        _GlassColor ("Glass Color", Color) = (0.8, 0.8, 0.8, 1.0)
        _Transparency ("Transparency", Range(0.1, 1.0)) = 0.5
        _Smoothness ("Smoothness", Range(0.01, 1.0)) = 0.5
    }

    SubShader
    {
        Tags { "RenderType"="Transparent" }
        LOD 200

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct appdata_t
            {
                float4 vertex : POSITION;
                float2 texcoord : TEXCOORD0;
            };

            struct v2f
            {
                float2 texcoord : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _GlassColor;
            float _Transparency;
            float _Smoothness;

            v2f vert (appdata_t v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.texcoord = v.texcoord;
                return o;
            }

            half4 frag (v2f i) : SV_Target
            {
                half4 col = tex2D(_MainTex, i.texcoord);

                // 根据Smoothness来模拟磨砂表面效果
                half smoothness = _Smoothness;

                // 使用Smoothstep函数平滑边缘
                half rim = 1.0 - smoothstep(0.5 - smoothness, 0.5 + smoothness, col.r);

                // 将玻璃颜色与透明度相乘，添加磨砂效果
                col.rgb = _GlassColor.rgb * col.rgb;
                col.a = _Transparency * rim;

                return col;
            }
            ENDCG
        }
    }
}
