//使用了颜色、强度和闪烁速度属性来控制灯光的外观。Shader根据时间变化的正弦函数来模拟灯光的闪烁效果。

Shader "Custom/ConcertLightShader"
{
    Properties
    {
        _Color ("Light Color", Color) = (1, 1, 1, 1)
        _Intensity ("Light Intensity", Range(0, 5)) = 1.0
        _FlickerSpeed ("Flicker Speed", Range(0.1, 5)) = 1.0
    }

    SubShader
    {
        Tags { "Queue" = "Transparent" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct appdata_t
            {
                float4 vertex : POSITION;
            };

            struct v2f
            {
                float4 pos : TEXCOORD0;
                float3 viewDir : TEXCOORD1;
            };

            float4 _Color;
            float _Intensity;
            float _FlickerSpeed;

            v2f vert (appdata_t v)
            {
                v2f o;
                o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
                o.viewDir = normalize(mul((float3x3)unity_ObjectToWorld, v.vertex.xyz));
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                // 计算灯光强度，根据时间变化和闪烁速度
                float flicker = sin(_FlickerSpeed * _Time.y);
                float intensity = _Intensity + flicker;

                // 计算最终颜色
                fixed4 color = _Color * intensity;

                return color;
            }
            ENDCG
        }
    }
}
